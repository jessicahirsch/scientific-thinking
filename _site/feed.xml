<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/scientific-thinking/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/scientific-thinking/" rel="alternate" type="text/html" /><updated>2025-02-12T21:31:36-08:00</updated><id>http://localhost:4000/scientific-thinking/feed.xml</id><title type="html">Scientific Thinking</title><subtitle>A place to publish my professional work. Topics include operator&apos;s guides, testing how-to&apos;s, and other technical writing.</subtitle><entry><title type="html">Regression Test Operator’s Guide</title><link href="http://localhost:4000/scientific-thinking/jekyll/update/2024/09/15/regression-test-operators-guide.html" rel="alternate" type="text/html" title="Regression Test Operator’s Guide" /><published>2024-09-15T11:18:00-07:00</published><updated>2024-09-15T11:18:00-07:00</updated><id>http://localhost:4000/scientific-thinking/jekyll/update/2024/09/15/regression-test-operators-guide</id><content type="html" xml:base="http://localhost:4000/scientific-thinking/jekyll/update/2024/09/15/regression-test-operators-guide.html"><![CDATA[<h2 id="regression-testing-in-theory">Regression Testing in Theory</h2>

<p>Regression testing evaluates if the system under test has regressed to a devolved, or more primitive, state following a release.
In good practice, we test the changed area, or the code issued in the release.
In better practice, we test the changed area and any areas transitively affected by that change.
In best practice, we test the entire system. Optimally, no change goes untested.</p>

<p><img src="/scientific-thinking/images/test-pyramid.png" alt="Test Pyramid" /></p>

<p><strong>Test Scope</strong></p>

<p>Regression tests hold the second-tier position at the top of the pyramid to suggest the space they ought to occupy. The higher the position, the less occupancy. That is meant to be an advisory.</p>

<p>Depending on where they execute and what they execute on, regression tests are often large in scope. That is, there are many systems and many machines that must be functioning properly for the test to succeed. Otherwise the test may fail. And the assertion could be entirely unrelated. Thus, debugging difficulties.</p>

<p>I’ve included an excellent diagram from <em>Software Engineering at Google, O’Reilly (2020)</em> that represents the growing complexity of regression tests from the Test Pyramid.</p>

<p><img src="/scientific-thinking/images/test-scope.png" alt="Test Scope, Software Engineering at Google (O’Reilly, 215, 2020)" /></p>

<h2 id="regression-testing-in-general-practice">Regression Testing in General Practice</h2>

<p>The act of regression testing is the action of testing your subject against a set of expectations. Those expectations are ideally created by the product’s owner, who deeply understands the behavior that the subject ought to have.</p>

<p>Perhaps you are accustomed to Quality Assurance engineers performing a regression test on your behalf. That is, once development is complete, testing your code against a set of acceptance criteria.</p>

<p>In many cases, this is done manually, with the Quality Assurance engineer checking your work performs properly against rows of test cases issued by the product’s owner.</p>

<p>The aim is for “quality all the way through.” In theory, we aim for <em>shifted-left</em> testing such that we can go <em>without</em> embedded Quality Assurance engineers. In practice, our regression testing happens at the end of the software development lifecycle (SDL), after the code has already been merged.</p>

<p>Automated regression testing is arguably more repeatable and accurate than a Quality Assurance engineer manually testing your code.
When done well, they can operate in place of, or as a supplement to, a QA.</p>

<h3 id="test-cases">Test Cases</h3>

<p>It is recommended that you write test cases in advance of automation. Preferably at the onset of a new project. Consult with the project’s owner. They tend to be the individuals deeply familiar with the intended behavior of the shippable code. Plain-text languages, like Gherkin, can help translate the language between product owner and engineer.</p>

<p><strong>Gherkin</strong></p>

<p>Gherkin is a popular language to write test cases, a personal favorite. Gherkin is a plain-text testing language in the behavior-driven style. It takes the the guesswork out of writing test cases by prompting you with a user, an action and an assertion. It reads naturally and yields a shorter time to automate.</p>

<p>If you recall from Test Scope section, restricting test size becomes beneficial within regression tests. Gherkin is meant to be read naturally.</p>

<p><strong>Given</strong> <em>some condition</em></p>

<p><strong>When</strong> <em>some action is taken</em></p>

<p><strong>Then</strong> <em>there is expected behavior</em></p>

<p>“And” may be used to denote more complex or supplemental behavior. “And” can be placed anywhere after the “Given” clause in the test case. It can be used more than once if needed.</p>

<p><strong>Given</strong> <em>some condition</em></p>

<p><strong>When</strong> <em>some action is taken</em></p>

<p><strong>And</strong> <em>some additional action is taken</em></p>

<p><strong>Then</strong> <em>there is expected behavior</em></p>

<h3 id="test-conditions">Test Conditions</h3>

<p>Before you publish your tests you must understand the testing conditions necessary to qualify your tests as complete and accurate. They may require a certain user type or user state. This depends entirely on the subject.</p>

<h3 id="page-object-model">Page Object Model</h3>

<p>Regression test workspaces may be structured using the page object model. The model is a design pattern used to structure automated tests for web applications. Each web page in the application has a corresponding Page Class. These classes encapsulate the behavior of the web page.</p>

<p>The elements that build the behavior are abstracted to corresponding files in the support directory. By centralizing locators within page classes, any changes to the UI structure can be managed more efficiently by updating the locators in one place.</p>

<p>If you find yourself reusing elements in more than one test, it is best practice to abstract the locator into a key value pair in a <code class="language-plaintext highlighter-rouge">const</code> file.</p>

<h3 id="running-tests-locally-and-test-development">Running Tests Locally and Test Development</h3>

<p>During test development, we have the advantage of simulating a testing GUI that you can engage with directly. In CI, where our regression tests operate on deployment to production, a GUI is not necessary. No need for deployments. Any environment can be substituted.</p>

<p>This can be achieved using the <code class="language-plaintext highlighter-rouge">--headed</code> argument.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Regression Testing in Theory]]></summary></entry><entry><title type="html">Cypress Operator’s Guide</title><link href="http://localhost:4000/scientific-thinking/jekyll/update/2024/09/09/cypress-operator's-guide.html" rel="alternate" type="text/html" title="Cypress Operator’s Guide" /><published>2024-09-09T11:18:00-07:00</published><updated>2024-09-09T11:18:00-07:00</updated><id>http://localhost:4000/scientific-thinking/jekyll/update/2024/09/09/cypress-operator&apos;s-guide</id><content type="html" xml:base="http://localhost:4000/scientific-thinking/jekyll/update/2024/09/09/cypress-operator&apos;s-guide.html"><![CDATA[<h2 id="cypress-101">Cypress 101</h2>
<p>Cypress is a friendly, frontend testing tool that resembles legacy testing tools like Selenium. It can test anything that runs in a browser. Published tests may be small and omit any dependencies.</p>

<h3 id="what-does-cypress-offer">What does Cypress Offer?</h3>
<p>Cypress comes complete with a built-in test runner, a Cloud environment, video recordings and test replays to closely examine reported failures.</p>

<h3 id="test-replays">Test Replays</h3>
<p>With Test Replay, Cypress Cloud regenerates the entire UI for viewing the run and debugging CI failures. You can:</p>
<ul>
  <li>watch the simulated version of the app in realtime</li>
  <li>time travel, within the frontend simulator, second by second</li>
  <li>pause at the point-in-time where your test failed</li>
</ul>

<p>If your test results are recorded to Cypress Cloud you do not have to worry about manually reproducing bugs. You can replay the failure directly in the Cloud.</p>

<p><img src="/scientific-thinking/images/test-replay.png" alt="Test Replay Visual Guide" /></p>

<h3 id="cypress-and-xpaths">Cypress and Xpaths</h3>
<p>Xpaths are usually long, “stringified” locators used to traverse the DOM tree that composes your website. The problem is that they are highly sensitive to change, meaning that the removal of one node in the DOM tree will likely result in an invalid xpath. This will immediately fail your tests.</p>

<p><strong>Cypress does not natively support xpaths.</strong> The <code class="language-plaintext highlighter-rouge">cypress-xpath</code> npm package is no longer maintained by the author and is not Cypress-supported.
Refrain from using xpaths when possible.
Instead use chains composed of Cypress methods to achieve the desired result. Read more about Cypress chains in my Cheatsheet.</p>

<h3 id="cypress-and-dependencies">Cypress and Dependencies</h3>
<p>Cypress tests are most effective when written with little to no dependencies between. By default, Cypress resets state between tests, unless otherwise specified in the Cypress config file. Dependencies between tests create distance between tests and assertions. The closer the assertion lives to its test, the faster the resolution.</p>

<p>💡 <strong>Protip</strong> state is reset between Cypress tests by default (I.e. between <code class="language-plaintext highlighter-rouge">it</code> blocks). To offset, set <code class="language-plaintext highlighter-rouge">testIsolation: false</code> in your Cypress config file.</p>

<h3 id="cypress-chains">Cypress Chains</h3>
<p>Cypress chains are commands strung together to execute sequentially. Chains are a more readable and reliable alternative to using xpath.</p>

<h3 id="cypress-and-iframes">Cypress and iFrames</h3>
<p>There is no easy application of working with <code class="language-plaintext highlighter-rouge">iframes</code> in Cypress. Most of the cy DOM traversal commands hard stop the moment they hit <code class="language-plaintext highlighter-rouge">#document</code> node inside the <code class="language-plaintext highlighter-rouge">iframe</code>. Working with <code class="language-plaintext highlighter-rouge">iframes</code> will require some custom code.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Cypress 101 Cypress is a friendly, frontend testing tool that resembles legacy testing tools like Selenium. It can test anything that runs in a browser. Published tests may be small and omit any dependencies.]]></summary></entry></feed>